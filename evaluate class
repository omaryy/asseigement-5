

public class evaluate {

public int evaluate (String expression )
{
	Stack <Integer> s =new Stack <>();
for (int i=0;i<expression.length();i++)	
{
	char s4=expression.charAt(i);
	if (Character.isDigit(s4)) {
	s.push(s4-'0');
	}
	else   {

		

		int s2 = s.pop();
		int s3=   s.pop();
		
		
		
	if (s4=='+')
	{
		int p=s2+s3;
		s.push( p);
	}
	if (s4=='-')
	{
		int p=s3-s2;
		s.push( p);
	}
	if (s4=='*')
	{
	int p=s2*s3;
	s.push( p);
	}
	if (s4=='/')
	{
		int p=s3/s2;
		s.push( p);
	}
		}
	}
	return  s.pop();	
}
static int Prec(char ch) 
{ 
    switch (ch) 
    { 
    case '+': 
    case '-': 
        return 1; 
   
    case '*': 
    case '/': 
        return 2; 
   
  
    } 
    return -1; 
} 

 
static String infixToPostfix(String exp) 
{ 
     
    String result = new String(""); 
      
    Stack<Character> stack = new Stack<>(); 
      
    for (int i = 0; i<exp.length(); ++i) 
    { 
        char c = exp.charAt(i); 
          
    
        if (Character.isLetterOrDigit(c)) 
            result += c; 
            
        else if (c == '(') 
            stack.push(c); 
          
     
        else if (c == ')') 
        { 
            while (!stack.isempty() && stack.peek() != '(') 
                result += stack.pop(); 
              
           if (!stack.isempty() && stack.peek() != '(') 
                return "Invalid Expression";               
            
                stack.pop(); 
        } 
        else 
        { 
            while (!stack.isempty() && Prec(c) <= Prec(stack.peek())) 
                result += stack.pop(); 
            stack.push(c); 
        } 
   
    } 
   

    while (!stack.isempty()) 
        result += stack.pop(); 
   
    return result; 
} 	
}


